{"uuid":"1be10df1-9fe1-45da-9b61-bbd5b97167e5","historyId":"3e296c5da877b710df91b78ba07b3998","fullName":"org.example.httptest.ApiTests.testGetHello","labels":[{"name":"package","value":"org.example.httptest.ApiTests"},{"name":"testClass","value":"org.example.httptest.ApiTests"},{"name":"testMethod","value":"testGetHello"},{"name":"parentSuite","value":"Default Suite"},{"name":"suite","value":"untitled1"},{"name":"subSuite","value":"org.example.httptest.ApiTests"},{"name":"host","value":"DESKTOP-I2G6HS8"},{"name":"thread","value":"124908@DESKTOP-I2G6HS8.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"}],"links":[],"name":"testGetHello","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"1 expectation failed.\nXML path field1 doesn't match.\nExpected: value1\n  Actual: <nullnullnullnullnullnullnullnullnullrest-assured之静态导入及简单使用实例 - lwjnicole - 博客园nullnullnullnullnullnullnullnullnull\n    {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"BlogPosting\",\n      \"@id\": \"https://www.cnblogs.com/lwjnicole/p/8289844.html\",\n      \"headline\": \"rest-assured之静态导入及简单使用实例\",\n      \"description\": \"一、静态导入 为了有效的使用rest-assured，官网推荐从下列class中静态导入方法： 如果想使用 Json Schema\\u0026#160;validation(验证)，还需要静态导入下面的方法： 如果我们正在使用的是 Spring MVC ，我们可以使用 spring--mock-mvc模型的rest-a\",\n      \"image\": [\n        \n      ],\n      \"author\": {\n        \"@type\": \"Person\",\n        \"@id\": \"https://www.cnblogs.com/lwjnicole/\",\n        \"name\": \"lwjnicole\",\n        \"url\": \"https://www.cnblogs.com/lwjnicole/\"\n      },\n      \"publisher\": {\n        \"@type\": \"Organization\",\n        \"@id\": \"https://www.cnblogs.com/\",\n        \"name\": \"博客园\",\n        \"url\": \"https://www.cnblogs.com/\"\n      },\n      \"datePublished\": \"2018-01-15T20:38:00.0000000&#x2B;08:00\",\n      \"dateModified\": \"2018-01-16T11:24:00.0000000&#x2B;08:00\",\n      \"wordCount\": \"26237\",\n      \"isPartOf\": {\n        \"@type\": \"Blog\",\n        \"@id\": \"https://www.cnblogs.com/lwjnicole/\",\n        \"name\": \"lwjnicole\",\n        \"publisher\": {\n          \"@type\": \"Organization\",\n          \"@id\": \"https://www.cnblogs.com/\",\n          \"name\": \"博客园\"\n        }\n      }\n    }\n    \n        var currentBlogId = 395433;\n        var currentBlogApp = 'lwjnicole';\n        var isLogined = false;\n        var isBlogOwner = false;\n        var skinName = 'BlueSky';\n        var visitorUserId = '';\n        var hasCustomScript = true;\n        window.cb_enable_mathjax = false;\n        window.mathEngine = 0;\n        window.codeHighlightEngine = 1;\n        window.enableCodeLineNumber = false;\n        window.codeHighlightTheme = 'cnblogs';\n        window.darkModeCodeHighlightTheme = 'vs2015';\n        window.isDarkCodeHighlightTheme = false;\n        window.isDarkModeCodeHighlightThemeDark = true;\n        window.isDisableCodeHighlighter = false;\n        window.enableCodeThemeTypeFollowSystem = false;\n        window.enableMacStyleCodeBlock = false;\n    \n            window.currentPostId = 8289844;\n            window.currentPostDateAdded = '2018-01-15 20:38';\n        nullnullupdateCustomBlogReferrer();nullnullnullnullnullnullnull会员周边众包新闻博问闪存赞助商Chat2DBnullnullnullnullnull所有博客nullnull当前博客nullnullnullnullnullnull我的博客我的园子账号设置会员中心...退出登录注册登录nulllwjnicolenull\n博客园\n首页\n新随笔\n联系\n订阅\n管理loadBlogStats();rest-assured之静态导入及简单使用实例null一、静态导入　　为了有效的使用rest-assured，官网推荐从下列class中静态导入方法：123Json Schema1如果我们正在使用的是 Spring MVC ，我们可以使用 spring--mock-mvc模型的rest-assured DSL来对Spring 的controllers层进行单元测试。为此我们需要从 RestAssuredMockMvc 中导入下面的方法，还不是从 io.restassured.RestAssured 导入：1二、使用实例1.Json实例http://localhost:8080/lotto 1{\n 2:{\n 3,\n 4],\n 5:[{\n 6,\n 7]\n 8 },{\n 9,\n10]\n11 }]\n12}\n13rest-assured可以非常简单的发起这个GET请求并且验证响应结果，比如：我们想验证 lottoId 是否等于 5 ，可以这样做：1或者我们想验证 winnerId的值是否是23,54 ：1值得注意的是：equalTo()方法和 hasItems()方法是属于 Hamcrest matchers 的方法，所有我们需要静态导入 org.hamcrest.Matchers 。注意：\"json path\" 使用 Groovy's GPath 标记法，不要与 Jayway's JsonPath 混淆。2.以BigDecimal形式返回 floats 和 doubles　　我们可以对rest-assured和JsonPath进行配置，使之以BigDecimal形式返回json里的数值类型数据，而不是返回 floats 和 doubles，参照下面的json：1{\n2345默认情况下，我们验证 price的值是否等于12.12时是这样做的：1但是如果我们喜欢的话，我们可以通过JsonConfig 来配置rest-assured使之以BigDecimal形式返回json里的数值类型数据：1given().\n2        config(RestAssured.config().jsonConfig(jsonConfig().numberReturnType(BIG_DECIMAL))).\n3when().\n4).\n5then().\n6new3.匿名JSON根节点验证　　一个json文本并不一定有一个命名好的根节点属性，验证这种类型的json，这里有一个例子：1$空字符串1//第一种方式，使用 $ 代替根节点2));\n34//第二种方式，使用 空字符串 代替根节点54.XML实例　　XML可以使用同样的方式来验证。假设向 http://localhost:8080/greetXML 发送一个POST请求，并且返回下面的xml：1234上面的例子返回了一个基于 firstName 和 lastName 请求参数的greeting节点，我们可以通过rest-assured非常简单展示和验证，比如验证 firstName ：1given().\n2).\n3when().\n4).\n5then().\n6如果我们想同时验证  firstName 和 lastName ，我们可以这样写：1given().\n2).\n3when().\n4).\n5then().\n6)).\n7或者是使用简单的写法：15.XML命名空间　　为了使响应断言把命名空间考虑在内，我们需要使用  io.restassured.config.XmlConfig 定义一个命名空间。例如，这里有一个叫做 namespace-example 的资源位于 http://localhost:8080，返回下面的XML：1234我们可以申明 http://localhost:8080 这个uri并且验证响应结果：1given().\n2))).\n3when().\n4).\n5then().\n6)).\n7)).\n8release notes6.XPath　　我们也可以通过使用X-Path 来验证XML响应结果，比如：1或者：1如果需要在XPath表达式里面使用命名空间的话，需要在配置中启用这些选项：1given().\n2true))).\n3when().\n4).\n5then().\n6namespaceContextjavax.xml.namespace.NamespaceContext三、高级使用实例(复杂的解析以及验证)　　这正是rest-assured的闪光点所在，因为rest-assured实现了Groovy，rest-assured从 Groovy 的API中获得了很大的好处。让我们先从 Groovy 的例子来看：1]\n2findAllitbuffalodinosaur。　　下面有一些有趣的方法，也可以在 Groovy 集合中使用：find　　------ 查找第一个匹配闭包断言(closure predicate)的元素collect 　　------封装集合中的每一个元素调用闭包的返回值sum　　-------集合中所有元素之和max/min　　--------返回集合中的最大值或最小值那么我们在验证XML和Json时，如何应用这些优点呢？？？1.XML例子　　例如，我们有个资源 http://localhost:8080/shopping 返回下面的XML： 1 2 3 4 5 6 7 8 910111213接下来我们要写一个test方法来验证 类型为 groceries 的category节点是否包含 Chocolate和Coffee两个元素，在rest-assured中我们可以这么写：1when().\n2).\n3then().\n4 shopping.category find hasitems　　但是如果我们想获得上面的item，然后又不想使用 Hamcrest matcher 的 hasitems 方法来验证，那么我们可以使用XmlPath：1// 获得response，并且以字符串输出2).asString();\n3// 从response中获得groceries，\"from\"是从XmlPath类中静态导入的 4如果在response中我们仅仅关心的是 groceries ，我们还可以这样做：1// 获得response，并以字符串形式输出21.1 深度优先搜索　　事实上，前面的例子我们还可以进一步简化一下：1when().\n2).\n3then().\n4**2.JSON例子　　例如，我们有个资源 http://localhost:8080/store 返回下面的JSON： 1{  \n 2:{  \n 3:[  \n 4         {  \n 5,\n 6,\n 7,\n 8 9         },\n10         {  \n11,\n12,\n13,\n1415         },\n16         {  \n17,\n18,\n19,\n20,\n2122         },\n23         {  \n24,\n25,\n26,\n27,\n2829         }\n30      ]\n31   }\n32例1，我们发起一个请求\"/store\"，并且断言：book的价格(price)小于10的title，是否包含\"Sayings of the Century\" 和 \"Moby Dick\"两个元素：1hasItems1//以字符串形式输出response2).asString();\n3//从response中获得所有price<10的book，\"from\"是从JsonPath类中静态导入的4例2，我们来考虑下如果我们想要断言：所有author字段值长度的总和是否大于50。这看起来是一个难以回答的问题，这也正显示了闭包(closures)和Groovy集合的强大之处。在rest-assured中我们可以这样做：1when().\n2).\n3then().\n4store.book.authorcollect it.length()　　事实上，上面的例子我们还可以做进一步的简化，让我们再来看一下 \"words\" 这个例子：1*.1]\n2assertGroovy 返回了一个新的包含words中每个元素长度值的集合。我们也可以在rest-assured中应用这个方法在author上：1when().\n2);\n3then().\n4当然，我们也可以使用JsonPath来获得这个结果：1// 以字符串形式输出response2).asString();\n3// 获得author字段值长度的和， \"from\" 是从JsonPath类中静态导入的4int);\n5// 断言6   nullnullnullnull2018-01-15 20:38lwjnicole17760编辑收藏举报\n    var cb_entryId = 8289844, cb_entryCreatedDate = '2018-01-15 20:38', cb_postType = 1, cb_postTitle = 'rest-assured之静态导入及简单使用实例';\n    var allowComments = true, cb_blogId = 395433, cb_blogApp = 'lwjnicole', cb_blogUserGuid = '0280ac4f-0149-4078-c791-08d523685c8c';\n    mermaidRender.render()\n    markdown_highlight()\n    zoomManager.apply(\"#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)\");    \nnullnullnullnullnull刷新页面返回顶部nullnullnullnullnullnullnullnullnull\n        var commentManager = new blogCommentManager();\n        commentManager.renderComments(0);\n        fixPostBody();\n        window.footnoteTipManager.generateFootnoteTips();\n\n            window.tocManager.displayDisableTocTips = false;\n            window.tocManager.generateToc();\n            \n                setTimeout(function() { countViews(cb_blogId, cb_entryId); }, 50);\n            \n            deliverT2();\n            deliverC1C2();\n            loadNewsAndKb();\n            \n                LoadPostCategoriesTags(cb_blogId, cb_entryId);\n            \n            LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);\n            GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);\n            loadOptUnderPost();\n            GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);\n                公告nullloadBlogNews();nullnullloadBlogDefaultCalendar();nullloadBlogSideColumn();nullnullnullPowered by .NET 9.0 on Kubernetesnullnull$('#cnblogs_post_body img').wrap(function(){return \"<a rel=\"nofollow noopener\"  href='\"+$(this).attr(\"src\")+\"' data-lightbox='example-set'></a>\"});$(\".code_img_closed\").unwrap();$(\".code_img_opened\").unwrap();nullnull\n    window.dataLayer = window.dataLayer || [];\n    function gtag() { dataLayer.push(arguments); }\n    gtag('js', new Date());\n    gtag('config', 'G-M95P3TTWJZ');\nnull>\n","trace":"java.lang.AssertionError: 1 expectation failed.\nXML path field1 doesn't match.\nExpected: value1\n  Actual: <nullnullnullnullnullnullnullnullnullrest-assured之静态导入及简单使用实例 - lwjnicole - 博客园nullnullnullnullnullnullnullnullnull\n    {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"BlogPosting\",\n      \"@id\": \"https://www.cnblogs.com/lwjnicole/p/8289844.html\",\n      \"headline\": \"rest-assured之静态导入及简单使用实例\",\n      \"description\": \"一、静态导入 为了有效的使用rest-assured，官网推荐从下列class中静态导入方法： 如果想使用 Json Schema\\u0026#160;validation(验证)，还需要静态导入下面的方法： 如果我们正在使用的是 Spring MVC ，我们可以使用 spring--mock-mvc模型的rest-a\",\n      \"image\": [\n        \n      ],\n      \"author\": {\n        \"@type\": \"Person\",\n        \"@id\": \"https://www.cnblogs.com/lwjnicole/\",\n        \"name\": \"lwjnicole\",\n        \"url\": \"https://www.cnblogs.com/lwjnicole/\"\n      },\n      \"publisher\": {\n        \"@type\": \"Organization\",\n        \"@id\": \"https://www.cnblogs.com/\",\n        \"name\": \"博客园\",\n        \"url\": \"https://www.cnblogs.com/\"\n      },\n      \"datePublished\": \"2018-01-15T20:38:00.0000000&#x2B;08:00\",\n      \"dateModified\": \"2018-01-16T11:24:00.0000000&#x2B;08:00\",\n      \"wordCount\": \"26237\",\n      \"isPartOf\": {\n        \"@type\": \"Blog\",\n        \"@id\": \"https://www.cnblogs.com/lwjnicole/\",\n        \"name\": \"lwjnicole\",\n        \"publisher\": {\n          \"@type\": \"Organization\",\n          \"@id\": \"https://www.cnblogs.com/\",\n          \"name\": \"博客园\"\n        }\n      }\n    }\n    \n        var currentBlogId = 395433;\n        var currentBlogApp = 'lwjnicole';\n        var isLogined = false;\n        var isBlogOwner = false;\n        var skinName = 'BlueSky';\n        var visitorUserId = '';\n        var hasCustomScript = true;\n        window.cb_enable_mathjax = false;\n        window.mathEngine = 0;\n        window.codeHighlightEngine = 1;\n        window.enableCodeLineNumber = false;\n        window.codeHighlightTheme = 'cnblogs';\n        window.darkModeCodeHighlightTheme = 'vs2015';\n        window.isDarkCodeHighlightTheme = false;\n        window.isDarkModeCodeHighlightThemeDark = true;\n        window.isDisableCodeHighlighter = false;\n        window.enableCodeThemeTypeFollowSystem = false;\n        window.enableMacStyleCodeBlock = false;\n    \n            window.currentPostId = 8289844;\n            window.currentPostDateAdded = '2018-01-15 20:38';\n        nullnullupdateCustomBlogReferrer();nullnullnullnullnullnullnull会员周边众包新闻博问闪存赞助商Chat2DBnullnullnullnullnull所有博客nullnull当前博客nullnullnullnullnullnull我的博客我的园子账号设置会员中心...退出登录注册登录nulllwjnicolenull\n博客园\n首页\n新随笔\n联系\n订阅\n管理loadBlogStats();rest-assured之静态导入及简单使用实例null一、静态导入　　为了有效的使用rest-assured，官网推荐从下列class中静态导入方法：123Json Schema1如果我们正在使用的是 Spring MVC ，我们可以使用 spring--mock-mvc模型的rest-assured DSL来对Spring 的controllers层进行单元测试。为此我们需要从 RestAssuredMockMvc 中导入下面的方法，还不是从 io.restassured.RestAssured 导入：1二、使用实例1.Json实例http://localhost:8080/lotto 1{\n 2:{\n 3,\n 4],\n 5:[{\n 6,\n 7]\n 8 },{\n 9,\n10]\n11 }]\n12}\n13rest-assured可以非常简单的发起这个GET请求并且验证响应结果，比如：我们想验证 lottoId 是否等于 5 ，可以这样做：1或者我们想验证 winnerId的值是否是23,54 ：1值得注意的是：equalTo()方法和 hasItems()方法是属于 Hamcrest matchers 的方法，所有我们需要静态导入 org.hamcrest.Matchers 。注意：\"json path\" 使用 Groovy's GPath 标记法，不要与 Jayway's JsonPath 混淆。2.以BigDecimal形式返回 floats 和 doubles　　我们可以对rest-assured和JsonPath进行配置，使之以BigDecimal形式返回json里的数值类型数据，而不是返回 floats 和 doubles，参照下面的json：1{\n2345默认情况下，我们验证 price的值是否等于12.12时是这样做的：1但是如果我们喜欢的话，我们可以通过JsonConfig 来配置rest-assured使之以BigDecimal形式返回json里的数值类型数据：1given().\n2        config(RestAssured.config().jsonConfig(jsonConfig().numberReturnType(BIG_DECIMAL))).\n3when().\n4).\n5then().\n6new3.匿名JSON根节点验证　　一个json文本并不一定有一个命名好的根节点属性，验证这种类型的json，这里有一个例子：1$空字符串1//第一种方式，使用 $ 代替根节点2));\n34//第二种方式，使用 空字符串 代替根节点54.XML实例　　XML可以使用同样的方式来验证。假设向 http://localhost:8080/greetXML 发送一个POST请求，并且返回下面的xml：1234上面的例子返回了一个基于 firstName 和 lastName 请求参数的greeting节点，我们可以通过rest-assured非常简单展示和验证，比如验证 firstName ：1given().\n2).\n3when().\n4).\n5then().\n6如果我们想同时验证  firstName 和 lastName ，我们可以这样写：1given().\n2).\n3when().\n4).\n5then().\n6)).\n7或者是使用简单的写法：15.XML命名空间　　为了使响应断言把命名空间考虑在内，我们需要使用  io.restassured.config.XmlConfig 定义一个命名空间。例如，这里有一个叫做 namespace-example 的资源位于 http://localhost:8080，返回下面的XML：1234我们可以申明 http://localhost:8080 这个uri并且验证响应结果：1given().\n2))).\n3when().\n4).\n5then().\n6)).\n7)).\n8release notes6.XPath　　我们也可以通过使用X-Path 来验证XML响应结果，比如：1或者：1如果需要在XPath表达式里面使用命名空间的话，需要在配置中启用这些选项：1given().\n2true))).\n3when().\n4).\n5then().\n6namespaceContextjavax.xml.namespace.NamespaceContext三、高级使用实例(复杂的解析以及验证)　　这正是rest-assured的闪光点所在，因为rest-assured实现了Groovy，rest-assured从 Groovy 的API中获得了很大的好处。让我们先从 Groovy 的例子来看：1]\n2findAllitbuffalodinosaur。　　下面有一些有趣的方法，也可以在 Groovy 集合中使用：find　　------ 查找第一个匹配闭包断言(closure predicate)的元素collect 　　------封装集合中的每一个元素调用闭包的返回值sum　　-------集合中所有元素之和max/min　　--------返回集合中的最大值或最小值那么我们在验证XML和Json时，如何应用这些优点呢？？？1.XML例子　　例如，我们有个资源 http://localhost:8080/shopping 返回下面的XML： 1 2 3 4 5 6 7 8 910111213接下来我们要写一个test方法来验证 类型为 groceries 的category节点是否包含 Chocolate和Coffee两个元素，在rest-assured中我们可以这么写：1when().\n2).\n3then().\n4 shopping.category find hasitems　　但是如果我们想获得上面的item，然后又不想使用 Hamcrest matcher 的 hasitems 方法来验证，那么我们可以使用XmlPath：1// 获得response，并且以字符串输出2).asString();\n3// 从response中获得groceries，\"from\"是从XmlPath类中静态导入的 4如果在response中我们仅仅关心的是 groceries ，我们还可以这样做：1// 获得response，并以字符串形式输出21.1 深度优先搜索　　事实上，前面的例子我们还可以进一步简化一下：1when().\n2).\n3then().\n4**2.JSON例子　　例如，我们有个资源 http://localhost:8080/store 返回下面的JSON： 1{  \n 2:{  \n 3:[  \n 4         {  \n 5,\n 6,\n 7,\n 8 9         },\n10         {  \n11,\n12,\n13,\n1415         },\n16         {  \n17,\n18,\n19,\n20,\n2122         },\n23         {  \n24,\n25,\n26,\n27,\n2829         }\n30      ]\n31   }\n32例1，我们发起一个请求\"/store\"，并且断言：book的价格(price)小于10的title，是否包含\"Sayings of the Century\" 和 \"Moby Dick\"两个元素：1hasItems1//以字符串形式输出response2).asString();\n3//从response中获得所有price<10的book，\"from\"是从JsonPath类中静态导入的4例2，我们来考虑下如果我们想要断言：所有author字段值长度的总和是否大于50。这看起来是一个难以回答的问题，这也正显示了闭包(closures)和Groovy集合的强大之处。在rest-assured中我们可以这样做：1when().\n2).\n3then().\n4store.book.authorcollect it.length()　　事实上，上面的例子我们还可以做进一步的简化，让我们再来看一下 \"words\" 这个例子：1*.1]\n2assertGroovy 返回了一个新的包含words中每个元素长度值的集合。我们也可以在rest-assured中应用这个方法在author上：1when().\n2);\n3then().\n4当然，我们也可以使用JsonPath来获得这个结果：1// 以字符串形式输出response2).asString();\n3// 获得author字段值长度的和， \"from\" 是从JsonPath类中静态导入的4int);\n5// 断言6   nullnullnullnull2018-01-15 20:38lwjnicole17760编辑收藏举报\n    var cb_entryId = 8289844, cb_entryCreatedDate = '2018-01-15 20:38', cb_postType = 1, cb_postTitle = 'rest-assured之静态导入及简单使用实例';\n    var allowComments = true, cb_blogId = 395433, cb_blogApp = 'lwjnicole', cb_blogUserGuid = '0280ac4f-0149-4078-c791-08d523685c8c';\n    mermaidRender.render()\n    markdown_highlight()\n    zoomManager.apply(\"#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)\");    \nnullnullnullnullnull刷新页面返回顶部nullnullnullnullnullnullnullnullnull\n        var commentManager = new blogCommentManager();\n        commentManager.renderComments(0);\n        fixPostBody();\n        window.footnoteTipManager.generateFootnoteTips();\n\n            window.tocManager.displayDisableTocTips = false;\n            window.tocManager.generateToc();\n            \n                setTimeout(function() { countViews(cb_blogId, cb_entryId); }, 50);\n            \n            deliverT2();\n            deliverC1C2();\n            loadNewsAndKb();\n            \n                LoadPostCategoriesTags(cb_blogId, cb_entryId);\n            \n            LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);\n            GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);\n            loadOptUnderPost();\n            GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);\n                公告nullloadBlogNews();nullnullloadBlogDefaultCalendar();nullloadBlogSideColumn();nullnullnullPowered by .NET 9.0 on Kubernetesnullnull$('#cnblogs_post_body img').wrap(function(){return \"<a rel=\"nofollow noopener\"  href='\"+$(this).attr(\"src\")+\"' data-lightbox='example-set'></a>\"});$(\".code_img_closed\").unwrap();$(\".code_img_opened\").unwrap();nullnull\n    window.dataLayer = window.dataLayer || [];\n    function gtag() { dataLayer.push(arguments); }\n    gtag('js', new Date());\n    gtag('config', 'G-M95P3TTWJZ');\nnull>\n\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\r\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:58)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:512)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:696)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:50)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:270)\r\n\tat io.restassured.specification.ResponseSpecification$body$1.callCurrent(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:50)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:212)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:117)\r\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:244)\r\n\tat org.example.httptest.ApiTests.testGetHello(ApiTests.java:26)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)\r\n\tat org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)\r\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)\r\n\tat org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)\r\n\tat org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)\r\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)\r\n\tat org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)\r\n\tat org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:819)\r\n\tat org.testng.TestRunner.run(TestRunner.java:619)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:443)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:336)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1228)\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1134)\r\n\tat org.testng.TestNG.run(TestNG.java:1101)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:65)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)\r\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1740972760143,"stop":1740972761055}